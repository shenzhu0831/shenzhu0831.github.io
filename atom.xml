<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cathy&#39;s blog</title>
  
  <subtitle>Plus Ultra</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-22T05:53:12.142Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript 的型別系統</title>
    <link href="http://yoursite.com/2020/05/22/2020-05-22/"/>
    <id>http://yoursite.com/2020/05/22/2020-05-22/</id>
    <published>2020-05-22T05:53:12.142Z</published>
    <updated>2020-05-22T05:53:12.142Z</updated>
    
    <content type="html"><![CDATA[<div class="info"><p>JavaScript俱備了程式語言都擁有的 <strong>值（values)</strong>，例如：booleans、數字、字串、陣列等，以上的值都有 <strong>特性（properties）</strong> 每個特性都有一個 <strong>鍵值（key or neme)</strong> 以及一個 <strong>值（value）</strong>。可以使用 <strong>點號（.)</strong> 來存取特性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj =&#123;&#125;; <span class="comment">//建立物件</span></span><br><span class="line">obj.foo = <span class="number">123</span> <span class="comment">//寫入特性</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"></span><br><span class="line">obj.foo <span class="comment">//讀取特性</span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure></div><h3 id="JavaScript-的型別"><a class="header-anchor" href="#JavaScript-的型別"></a>JavaScript 的型別</h3><p>JavaScript用有六種基礎別</p><ul><li>Undefined、Null</li><li>Boolean、String、Number</li><li>Object</li></ul><hr><h3 id="動態型別-v-s-靜態型別"><a class="header-anchor" href="#動態型別-v-s-靜態型別"></a>動態型別 v.s. 靜態型別</h3><p>靜態型別（static type)通常是指</p><blockquote><p><strong>在編譯時期</strong> 或 <strong>沒有執行程式時</strong> 的行別</p></blockquote><p>在靜態型別的語言中，變數、參數及物件得成員，都有編譯器，再編譯時期（coppiler) 就能知道的型別。編譯器可用此資訊來進行型別檢查（type check)，並最佳化編譯後的程式碼。</p><p>而動態型別（dynamic type) 則是指</p><blockquote><p><strong>再程式執行時</strong> 的行別</p></blockquote><p>即使在靜態型別的語言中，也會有動態的型別。以就是說再程式執行時給定時間點上變數之值的型別。這個動態行別可能與靜態行別不同。</p><p>舉例來說：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">再編譯時期宣告物件「鳥」（靜態型別），</span><br><span class="line">接著再程式執行時傳入參數「鵝」、「鴨子」、「麻雀」等（動態型別）</span><br></pre></td></tr></table></figure><p>而JavaScript則是動態型別。變數的行別通常再編譯時都是未知的。</p><hr><h3 id="靜態型別檢查-v-s-動態型別檢查"><a class="header-anchor" href="#靜態型別檢查-v-s-動態型別檢查"></a>靜態型別檢查 v.s. 動態型別檢查</h3><ul><li>靜態型別的語言於 <strong>編譯時期</strong> 進行型別檢查。</li><li>動態型別的語言於 <strong>程式執行時</strong> 進行型別檢察</li></ul><p>一個程式語言可以同時檢查靜態型別與動態行別。若檢查失敗，通常會產生某種錯誤或意外。</p><p>JavaScript只能進行非常有限的動態型別檢查</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="literal">null</span>;</span><br><span class="line">foo.prop</span><br><span class="line">typeError:cannot read property <span class="string">'prop'</span> <span class="keyword">of</span> <span class="literal">null</span></span><br><span class="line"><span class="comment">//無法辦別'prop'的特性</span></span><br></pre></td></tr></table></figure><p>大多時候JavaScript有辦法執行或安靜的失敗（由JS容錯機制設計所造成）</p><p>舉例來說當存取一個不存在的特性時，會得到undefined值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = &#123;&#125;</span><br><span class="line">bar.porp</span><br><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure><hr><h3 id="強制轉型"><a class="header-anchor" href="#強制轉型"></a>強制轉型</h3><p>在JavaScript中，處理型別不符的值的方式為 <strong>強制轉型（coerce)</strong> ，將隱含的型別強制轉換為正確的型別。大部分的運算子都會強制轉型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'3'</span> * <span class="string">'4'</span> <span class="comment">//運算兩個字串</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p>JavaScript內建轉換器僅支援 Boolean、Number、String及Object這些型別。</p><hr><h3 id="強型別-弱型別-v-s-動態型別-靜態型別"><a class="header-anchor" href="#強型別-弱型別-v-s-動態型別-靜態型別"></a>強型別 / 弱型別 v.s 動態型別 / 靜態型別</h3><div class="danger"><p>通常在程式語言會使用 <strong>強型別（strongly type)</strong> 與 <strong>弱行別（weekly type）</strong> 兩種。</p><p>強行別指的是「變數在程式執行時期的型別」這類語言的變數再被宣告時必須指定一種資料，而弱型別則相反。</p><p>此兩種型別並無明確被定義出來，時常和 <strong>動態型別</strong> 與 <strong>靜態行別</strong> 誤用。</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;info&quot;&gt;
&lt;p&gt;JavaScript俱備了程式語言都擁有的 &lt;strong&gt;值（values)&lt;/strong&gt;，例如：booleans、數字、字串、陣列等，以上的值都有 &lt;strong&gt;特性（properties）&lt;/strong&gt; 每個特性都有一個
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
